@page "/books"
@using ZNSTLibrary.Data.Models
@using ZNSTLibrary.Services.Books
@attribute [Authorize(Roles = "Administrator,Instructor,Student")]

<PageTitle>Books</PageTitle>


@inject IDialogService DialogService
@inject ILocalStorageService _LocalStorage
@inject IBooksService _booksService
@inject NavigationManager NavigationManager


@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
        Add Book
    </MudButton>
    <MudTable Items="@books" T="Book" OnRowClick="OpenCoursePage" @bind-SelectedItem="book">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Books</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>StartDate</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Author</MudTh>
            <MudTh>Enroll</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Title</MudTd>
            <MudTd DataLabel="Sign">@context.Pages</MudTd>
            <MudTd DataLabel="Name">@context.Author.Name</MudTd>
            <MudTd DataLabel="Position">@context.Description</MudTd>
            <MudTd DataLabel="Molar mass">@context.Author.Name</MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                           RowsPerPageString="@rowsPerPageString"
                           InfoFormat="@infoFormat"
                           AllItemsText="@allItemsText"
                           HorizontalAlignment="@horizontalAlignment"
                           HideRowsPerPage="@hideRowsPerPage"
                           HidePageNumber="@hidePageNumber"
                           HidePagination="@hidePagination" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Book> books = new List<Book>();
    private Book book = new Book();
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    private string userID = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uID = await _LocalStorage.GetItemAsync<string>("__id");
            userID = uID!;
        }
    }
    protected override async Task OnInitializedAsync()
    {

        var res = await _booksService.GetBooks();

        if (res != null)
        {
            books = res;
        }
    }

    private void OpenDialog()
    {
        NavigationManager.NavigateTo("/books/new");
        // var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.ExtraLarge };
        // DialogService.Show<AddBook>("Add Book", options);
    }

    void OpenCoursePage(TableRowClickEventArgs<Book> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"/book-details/{tableRowClickEventArgs.Item.Id}");
    }
}
